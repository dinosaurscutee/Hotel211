// <auto-generated />
using System;
using BookingHotel.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookingHotel.Migrations
{
    [DbContext(typeof(HotelDbContext))]
    partial class HotelDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookingHotel.Models.Booking", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingID"), 1L, 1);

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethodID")
                        .HasColumnType("int");

                    b.Property<int?>("ReportID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("RoomID")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BookingID");

                    b.HasIndex("PaymentMethodID");

                    b.HasIndex("ReportID");

                    b.HasIndex("RoomID");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            BookingID = 1,
                            CheckInDate = new DateTime(2024, 3, 24, 0, 2, 51, 405, DateTimeKind.Local).AddTicks(1407),
                            CheckOutDate = new DateTime(2024, 3, 26, 0, 2, 51, 405, DateTimeKind.Local).AddTicks(1412),
                            CustomerID = 2,
                            PaymentMethodID = 1,
                            ReportID = 1,
                            RoomID = 1,
                            TotalAmount = 200m
                        },
                        new
                        {
                            BookingID = 2,
                            CheckInDate = new DateTime(2024, 3, 25, 0, 2, 51, 405, DateTimeKind.Local).AddTicks(1418),
                            CheckOutDate = new DateTime(2024, 3, 27, 0, 2, 51, 405, DateTimeKind.Local).AddTicks(1418),
                            CustomerID = 3,
                            PaymentMethodID = 2,
                            ReportID = 2,
                            RoomID = 2,
                            TotalAmount = 300m
                        });
                });

            modelBuilder.Entity("BookingHotel.Models.BookingDetails", b =>
                {
                    b.Property<int>("BookingDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingDetailID"), 1L, 1);

                    b.Property<int?>("BookingID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("RoomID")
                        .HasColumnType("int");

                    b.Property<string>("SpecialRequests")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookingDetailID");

                    b.HasIndex("BookingID");

                    b.HasIndex("RoomID");

                    b.ToTable("BookingDetails");

                    b.HasData(
                        new
                        {
                            BookingDetailID = 1,
                            BookingID = 1,
                            RoomID = 1,
                            SpecialRequests = "Extra pillows"
                        },
                        new
                        {
                            BookingDetailID = 2,
                            BookingID = 2,
                            RoomID = 2,
                            SpecialRequests = "Early check-in"
                        });
                });

            modelBuilder.Entity("BookingHotel.Models.BookingHistory", b =>
                {
                    b.Property<int>("BookingHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingHistoryID"), 1L, 1);

                    b.Property<int?>("BookingID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BookingHistoryID");

                    b.HasIndex("BookingID");

                    b.HasIndex("CustomerID");

                    b.ToTable("BookingHistories");
                });

            modelBuilder.Entity("BookingHotel.Models.EmployeeSchedule", b =>
                {
                    b.Property<int>("ScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleID"), 1L, 1);

                    b.Property<int?>("EmployeeID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("ShiftEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShiftStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Slot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Taskname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScheduleID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("EmployeeSchedules");

                    b.HasData(
                        new
                        {
                            ScheduleID = 1,
                            EmployeeID = 3,
                            ShiftEndTime = new DateTime(2024, 3, 23, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            ShiftStartTime = new DateTime(2024, 3, 23, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BookingHotel.Models.EventRoom", b =>
                {
                    b.Property<int>("EventRoomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventRoomID"), 1L, 1);

                    b.Property<string>("Amenities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("RoomID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("EventRoomID");

                    b.HasIndex("RoomID");

                    b.ToTable("EventRooms");

                    b.HasData(
                        new
                        {
                            EventRoomID = 1,
                            Amenities = "Projector, Whiteboard",
                            EventDate = new DateTime(2024, 3, 30, 0, 2, 51, 405, DateTimeKind.Local).AddTicks(1719),
                            EventDescription = "Corporate conference",
                            EventName = "Conference",
                            RoomID = 2
                        });
                });

            modelBuilder.Entity("BookingHotel.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackID"), 1L, 1);

                    b.Property<int?>("BookingID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("FeedbackID");

                    b.HasIndex("BookingID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            FeedbackID = 1,
                            BookingID = 1,
                            Comment = "Great experience!",
                            CustomerID = 2,
                            Rating = 5
                        },
                        new
                        {
                            FeedbackID = 2,
                            BookingID = 2,
                            Comment = "Could be better",
                            CustomerID = 3,
                            Rating = 4
                        });
                });

            modelBuilder.Entity("BookingHotel.Models.HotelService", b =>
                {
                    b.Property<int>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Rating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ServiceID");

                    b.ToTable("HotelServices");

                    b.HasData(
                        new
                        {
                            ServiceID = 1,
                            Description = "In-room dining service",
                            ServiceName = "Room Service"
                        },
                        new
                        {
                            ServiceID = 2,
                            Description = "Laundry and dry cleaning service",
                            ServiceName = "Laundry"
                        },
                        new
                        {
                            ServiceID = 3,
                            Description = "Nefflix and Chill",
                            ServiceName = "Nefflix"
                        });
                });

            modelBuilder.Entity("BookingHotel.Models.Report", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ReportID");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            ReportID = 1,
                            Description = "Cleanliness report for rooms",
                            ReportName = "Room Cleanliness"
                        },
                        new
                        {
                            ReportID = 2,
                            Description = "Customer satisfaction report",
                            ReportName = "Customer Satisfaction"
                        });
                });

            modelBuilder.Entity("BookingHotel.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleID = 2,
                            RoleName = "Customer"
                        },
                        new
                        {
                            RoleID = 3,
                            RoleName = "Staff"
                        });
                });

            modelBuilder.Entity("BookingHotel.Models.Room", b =>
                {
                    b.Property<int>("RoomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomID"), 1L, 1);

                    b.Property<string>("DescriptionRoom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ServiceID")
                        .HasColumnType("int");

                    b.Property<int?>("StatusID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("ThumnailRoom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("View")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomID");

                    b.HasIndex("ServiceID");

                    b.HasIndex("StatusID");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomID = 1,
                            DescriptionRoom = "Standard 3-star room has an area of 45m2 and is equipped with 1 large, spacious and comfortable king bed. Guests staying at the hotel will be able to see Hoa Lac city with sea views overlooking 2 main roads. Not only that, with a bathroom full of equipment and services, customers will certainly have a feeling of relaxation and comfort when using it.",
                            Price = 30000.0,
                            Rate = 100m,
                            RoomNumber = 101,
                            RoomType = "Standard",
                            ServiceID = 1,
                            StatusID = 1,
                            ThumnailRoom = "https://media.cnn.com/api/v1/images/stellar/prod/140127103345-peninsula-shanghai-deluxe-mock-up.jpg?q=w_2226,h_1449,x_0,y_0,c_fill",
                            View = "Sea View"
                        },
                        new
                        {
                            RoomID = 2,
                            DescriptionRoom = "3-star standard Deluxe room has an area of 45m2 equipped with 2 single beds (each bed size is 1.4m x 2m) very spacious and comfortable. Guests staying at the hotel will be able to see Hoa Lac city with a mountain view overlooking the majestic mountains. Not only that, with a bathroom full of equipment and services, customers will certainly have a feeling of relaxation and comfort when using it.",
                            Price = 35000.0,
                            Rate = 150m,
                            RoomNumber = 102,
                            RoomType = "Deluxe",
                            ServiceID = 2,
                            StatusID = 1,
                            ThumnailRoom = "https://img.freepik.com/free-photo/luxury-bedroom-suite-resort-high-rise-hotel-with-working-table_105762-1783.jpg",
                            View = "Mountain View"
                        },
                        new
                        {
                            RoomID = 3,
                            DescriptionRoom = "3-star standard Family room has an area of 45m2 equipped with 2 single beds (each bed size is 1.4m x 2m) very spacious and comfortable. Guests staying at the hotel will be able to see Hoa Lac city with a mountain view overlooking the majestic mountains. Not only that, with a bathroom full of equipment and services, customers will certainly have a feeling of relaxation and comfort when using it.",
                            Price = 40000.0,
                            Rate = 120m,
                            RoomNumber = 103,
                            RoomType = "Family",
                            ServiceID = 3,
                            StatusID = 1,
                            ThumnailRoom = "https://media.istockphoto.com/id/627892060/photo/hotel-room-suite-with-view.jpg?s=612x612&w=0&k=20&c=YBwxnGH3MkOLLpBKCvWAD8F__T-ypznRUJ_N13Zb1cU=",
                            View = "Mountain View"
                        },
                        new
                        {
                            RoomID = 4,
                            DescriptionRoom = "Super room meets 3-star standard with an area of 45m2 and a very elegant interior design, bringing a relaxing and gentle feeling when customers stay. The room has a view overlooking the spacious FPT University of Hoa Lac city, with a private balcony, customers will feel the bustle of this beautiful coastal city. The bedroom is equipped with 2 beds (each bed size is 1.2m x 2m) very comfortable. Besides, the spacious bathroom with full amenities helps customers relax and have a wonderful experience.",
                            Price = 45000.0,
                            Rate = 130m,
                            RoomNumber = 104,
                            RoomType = "Super",
                            ServiceID = 1,
                            StatusID = 1,
                            ThumnailRoom = "https://cms.saharalasvegas.com/wp-content/uploads/2022/03/Marra-Style-Featured-Image-1048-%C3%97-640-px-1024x625.jpg",
                            View = "City View"
                        },
                        new
                        {
                            RoomID = 5,
                            DescriptionRoom = "This is also one of the two most spacious rooms (45m2) as well as the most luxurious in the hotel. The room has 3 beautiful views of Hoa Lac beach with 2 private balconies. The room has 1 bedroom (bed size is 2m x 2.2m) and 2 living areas: the living room and the tea area, suitable for receiving guests very formally and politely. The bathroom has a deep soaking tub that will help customers soak and relax after a tiring day of work.",
                            Price = 50000.0,
                            Rate = 140m,
                            RoomNumber = 105,
                            RoomType = "Suite",
                            ServiceID = 3,
                            StatusID = 1,
                            ThumnailRoom = "https://2.imimg.com/data2/SI/TS/MY-3125576/lemon_tree_hotel_single-room-500x500.jpg",
                            View = "Sea View"
                        },
                        new
                        {
                            RoomID = 6,
                            DescriptionRoom = "VIP Suite is one of the two largest rooms (45m2) as well as the most luxurious in the hotel. The room has 3 beautiful views overlooking the main streets of the city with 2 private balconies with great views. The room has 1 bedroom (bed size is 2m x 2.2m) and 2 living areas: the living room and the tea area that can receive guests very elegantly. Not only that, the bathroom has a deep soaking tub, which will help customers soak and relax after a tiring time.",
                            Price = 55000.0,
                            Rate = 160m,
                            RoomNumber = 106,
                            RoomType = "VIP",
                            ServiceID = 2,
                            StatusID = 1,
                            ThumnailRoom = "https://www.caesars.com/content/dam/plv/Room/versailles/versailles-renderings/plv-versailles-king-eiffel-tower-view.jpg.transform/slider-img/image.jpg",
                            View = "City View"
                        });
                });

            modelBuilder.Entity("BookingHotel.Models.RoomAmenities", b =>
                {
                    b.Property<int>("AmenityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AmenityID"), 1L, 1);

                    b.Property<string>("AmenityName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AmenityID");

                    b.ToTable("RoomAmenities");

                    b.HasData(
                        new
                        {
                            AmenityID = 1,
                            AmenityName = "WiFi",
                            Description = "High-speed internet access"
                        },
                        new
                        {
                            AmenityID = 2,
                            AmenityName = "TV",
                            Description = "Flat-screen television"
                        },
                        new
                        {
                            AmenityID = 3,
                            AmenityName = "Mini Refrigerator",
                            Description = "Mini bar includes free coffee and water"
                        },
                        new
                        {
                            AmenityID = 4,
                            AmenityName = "Air conditioning",
                            Description = "Air conditioning and refreshment center"
                        },
                        new
                        {
                            AmenityID = 5,
                            AmenityName = "Lock the door securely",
                            Description = "Coded secure door lock"
                        },
                        new
                        {
                            AmenityID = 6,
                            AmenityName = "Bathtub",
                            Description = "Comfortable bathtub"
                        });
                });

            modelBuilder.Entity("BookingHotel.Models.RoomRoomAmenities", b =>
                {
                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.Property<int>("AmenityID")
                        .HasColumnType("int");

                    b.HasKey("RoomID", "AmenityID");

                    b.HasIndex("AmenityID");

                    b.ToTable("RoomRoomAmenities");

                    b.HasData(
                        new
                        {
                            RoomID = 1,
                            AmenityID = 1
                        },
                        new
                        {
                            RoomID = 2,
                            AmenityID = 2
                        },
                        new
                        {
                            RoomID = 3,
                            AmenityID = 3
                        },
                        new
                        {
                            RoomID = 4,
                            AmenityID = 4
                        },
                        new
                        {
                            RoomID = 5,
                            AmenityID = 5
                        });
                });

            modelBuilder.Entity("BookingHotel.Models.RoomStatus", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusID"), 1L, 1);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusID");

                    b.ToTable("RoomStatuses");

                    b.HasData(
                        new
                        {
                            StatusID = 1,
                            StatusName = "Available"
                        },
                        new
                        {
                            StatusID = 2,
                            StatusName = "Booked"
                        },
                        new
                        {
                            StatusID = 3,
                            StatusName = "Occupied"
                        },
                        new
                        {
                            StatusID = 4,
                            StatusName = "Watting"
                        });
                });

            modelBuilder.Entity("BookingHotel.Models.Task", b =>
                {
                    b.Property<int>("TaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskID"), 1L, 1);

                    b.Property<int?>("RoomID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskID");

                    b.HasIndex("RoomID");

                    b.ToTable("HousekeepingTasks");

                    b.HasData(
                        new
                        {
                            TaskID = 1,
                            RoomID = 1,
                            ScheduledTime = new DateTime(2024, 3, 24, 0, 2, 51, 405, DateTimeKind.Local).AddTicks(1740),
                            TaskDescription = "Clean room",
                            TaskStatus = "Pending"
                        },
                        new
                        {
                            TaskID = 2,
                            RoomID = 2,
                            ScheduledTime = new DateTime(2024, 3, 25, 0, 2, 51, 405, DateTimeKind.Local).AddTicks(1743),
                            TaskDescription = "Change beddings",
                            TaskStatus = "Pending"
                        });
                });

            modelBuilder.Entity("BookingHotel.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EmailConfirmationToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("TokenCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserID");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            Email = "admin@example.com",
                            EmailConfirmationToken = "abc",
                            FirstName = "Admin",
                            IsEmailConfirmed = true,
                            LastName = "User",
                            Password = "admin123",
                            PhoneNumber = "123456789",
                            RoleID = 1,
                            UserName = "admin"
                        },
                        new
                        {
                            UserID = 2,
                            Email = "john@example.com",
                            EmailConfirmationToken = "abc",
                            FirstName = "John",
                            IsEmailConfirmed = true,
                            LastName = "Doe",
                            Password = "customer123",
                            PhoneNumber = "987654321",
                            RoleID = 2,
                            UserName = "customer1"
                        },
                        new
                        {
                            UserID = 3,
                            Email = "jane@example.com",
                            EmailConfirmationToken = "abc",
                            FirstName = "Jane",
                            IsEmailConfirmed = true,
                            LastName = "Smith",
                            Password = "staff123",
                            PhoneNumber = "111222333",
                            RoleID = 3,
                            UserName = "staff1"
                        },
                        new
                        {
                            UserID = 4,
                            Email = "Dung@example.com",
                            EmailConfirmationToken = "abc",
                            FirstName = "Ngo",
                            IsEmailConfirmed = true,
                            LastName = "Dung",
                            Password = "staff123",
                            PhoneNumber = "111222333",
                            RoleID = 3,
                            UserName = "Dung"
                        },
                        new
                        {
                            UserID = 5,
                            Email = "Hieu@example.com",
                            EmailConfirmationToken = "abc",
                            FirstName = "Hoang Quang",
                            IsEmailConfirmed = true,
                            LastName = "Hieu",
                            Password = "staff123",
                            PhoneNumber = "111222333",
                            RoleID = 2,
                            UserName = "Hieu"
                        },
                        new
                        {
                            UserID = 6,
                            Email = "Hoang@example.com",
                            EmailConfirmationToken = "abc",
                            FirstName = "Nguyen",
                            IsEmailConfirmed = true,
                            LastName = "Hoang",
                            Password = "staff123",
                            PhoneNumber = "111222333",
                            RoleID = 3,
                            UserName = "Hoang"
                        },
                        new
                        {
                            UserID = 7,
                            Email = "Khai@example.com",
                            EmailConfirmationToken = "abc",
                            FirstName = "Hua",
                            IsEmailConfirmed = true,
                            LastName = "Khai",
                            Password = "staff123",
                            PhoneNumber = "111222333",
                            RoleID = 3,
                            UserName = "Khai"
                        },
                        new
                        {
                            UserID = 8,
                            Email = "Lam@example.com",
                            EmailConfirmationToken = "abc",
                            FirstName = "Tung",
                            IsEmailConfirmed = true,
                            LastName = "Lam",
                            Password = "staff123",
                            PhoneNumber = "111222333",
                            RoleID = 2,
                            UserName = "Lam"
                        },
                        new
                        {
                            UserID = 9,
                            Email = "Tuyen@example.com",
                            EmailConfirmationToken = "abc",
                            FirstName = "Pham",
                            IsEmailConfirmed = true,
                            LastName = "Tuyen",
                            Password = "staff123",
                            PhoneNumber = "111222333",
                            RoleID = 3,
                            UserName = "Tuyen"
                        },
                        new
                        {
                            UserID = 10,
                            Email = "Huy@example.com",
                            EmailConfirmationToken = "abc",
                            FirstName = "Quang",
                            IsEmailConfirmed = true,
                            LastName = "Huy",
                            Password = "staff123",
                            PhoneNumber = "111222333",
                            RoleID = 2,
                            UserName = "Huy"
                        });
                });

            modelBuilder.Entity("Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"), 1L, 1);

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethodName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("PaymentID");

                    b.HasIndex("UserID");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            PaymentID = 1,
                            PaymentAmount = 0m,
                            PaymentDate = new DateTime(2024, 3, 23, 0, 2, 51, 405, DateTimeKind.Local).AddTicks(1309),
                            PaymentMethodName = "Credit Card"
                        },
                        new
                        {
                            PaymentID = 2,
                            PaymentAmount = 0m,
                            PaymentDate = new DateTime(2024, 3, 23, 0, 2, 51, 405, DateTimeKind.Local).AddTicks(1320),
                            PaymentMethodName = "Cash"
                        },
                        new
                        {
                            PaymentID = 3,
                            PaymentAmount = 0m,
                            PaymentDate = new DateTime(2024, 3, 23, 0, 2, 51, 405, DateTimeKind.Local).AddTicks(1321),
                            PaymentMethodName = "PayPal"
                        });
                });

            modelBuilder.Entity("BookingHotel.Models.Booking", b =>
                {
                    b.HasOne("Payment", "PaymentMethod")
                        .WithMany("Bookings")
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingHotel.Models.Report", "Report")
                        .WithMany("Bookings")
                        .HasForeignKey("ReportID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingHotel.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomID");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Report");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("BookingHotel.Models.BookingDetails", b =>
                {
                    b.HasOne("BookingHotel.Models.Booking", "Booking")
                        .WithMany("BookingDetails")
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingHotel.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomID");

                    b.Navigation("Booking");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("BookingHotel.Models.BookingHistory", b =>
                {
                    b.HasOne("BookingHotel.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID");

                    b.HasOne("BookingHotel.Models.User", "Customer")
                        .WithMany("BookingHistories")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BookingHotel.Models.EmployeeSchedule", b =>
                {
                    b.HasOne("BookingHotel.Models.User", "Employee")
                        .WithMany("EmployeeSchedules")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BookingHotel.Models.EventRoom", b =>
                {
                    b.HasOne("BookingHotel.Models.Room", "Room")
                        .WithMany("EventRooms")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("BookingHotel.Models.Feedback", b =>
                {
                    b.HasOne("BookingHotel.Models.Booking", "Booking")
                        .WithMany("Feedbacks")
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingHotel.Models.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID");

                    b.Navigation("Booking");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BookingHotel.Models.Room", b =>
                {
                    b.HasOne("BookingHotel.Models.HotelService", "Service")
                        .WithMany("Rooms")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingHotel.Models.RoomStatus", "Status")
                        .WithMany("Rooms")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("BookingHotel.Models.RoomRoomAmenities", b =>
                {
                    b.HasOne("BookingHotel.Models.RoomAmenities", "RoomAmenities")
                        .WithMany("RoomRooms")
                        .HasForeignKey("AmenityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingHotel.Models.Room", "Room")
                        .WithMany("RoomAmenities")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("RoomAmenities");
                });

            modelBuilder.Entity("BookingHotel.Models.Task", b =>
                {
                    b.HasOne("BookingHotel.Models.Room", "Room")
                        .WithMany("HousekeepingTasks")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("BookingHotel.Models.User", b =>
                {
                    b.HasOne("BookingHotel.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Payment", b =>
                {
                    b.HasOne("BookingHotel.Models.User", null)
                        .WithMany("Payments")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("BookingHotel.Models.Booking", b =>
                {
                    b.Navigation("BookingDetails");

                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("BookingHotel.Models.HotelService", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("BookingHotel.Models.Report", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BookingHotel.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BookingHotel.Models.Room", b =>
                {
                    b.Navigation("EventRooms");

                    b.Navigation("HousekeepingTasks");

                    b.Navigation("RoomAmenities");
                });

            modelBuilder.Entity("BookingHotel.Models.RoomAmenities", b =>
                {
                    b.Navigation("RoomRooms");
                });

            modelBuilder.Entity("BookingHotel.Models.RoomStatus", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("BookingHotel.Models.User", b =>
                {
                    b.Navigation("BookingHistories");

                    b.Navigation("EmployeeSchedules");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Payment", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
